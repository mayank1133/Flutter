import 'package:flutter/material.dart';
import 'AddUser.dart';

class ViewUser extends StatefulWidget {
  final List<Map<String, dynamic>> users;
  final List<Map<String, dynamic>> favoriteUsers;
  final Function(Map<String, dynamic>) onToggleFavorite;
  final Function(Map<String, dynamic>) onRemoveUser;
  final Function(Map<String, dynamic>, Map<String, dynamic>) onEditUser;

  const ViewUser({
    super.key,
    required this.users,
    required this.favoriteUsers,
    required this.onToggleFavorite,
    required this.onRemoveUser,
    required this.onEditUser,
  });

  @override
  State<ViewUser> createState() => _ViewUserState();
}

class _ViewUserState extends State<ViewUser> {
  TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _filteredUsers = [];
  String _selectedFilter = 'All';
  final List<String> _filterOptions = ['All', 'Name', 'Email', 'Mobile', 'City', 'DOB', 'Hobbies'];

  @override
  void initState() {
    super.initState();
    _filteredUsers = widget.users; // Initialize with all users
  }

  void _filterUsers(String query) {
    setState(() {
      if (query.isEmpty) {
        _filteredUsers = widget.users;
      } else {
        _filteredUsers = widget.users.where((user) {
          final searchLower = query.toLowerCase();

          switch (_selectedFilter) {
            case 'Name':
              return user['name'].toLowerCase().contains(searchLower);
            case 'Email':
              return user['email'].toLowerCase().contains(searchLower);
            case 'Mobile':
              return user['mobile'].toLowerCase().contains(searchLower);
            case 'City':
              return user['city'].toLowerCase().contains(searchLower);
            case 'DOB':
              return user['dob'].toLowerCase().contains(searchLower);
            case 'Hobbies':
              return user['hobbies'].toLowerCase().contains(searchLower);
            default:
              return user['name'].toLowerCase().contains(searchLower) ||
                  user['email'].toLowerCase().contains(searchLower) ||
                  user['mobile'].toLowerCase().contains(searchLower) ||
                  user['city'].toLowerCase().contains(searchLower) ||
                  user['dob'].toLowerCase().contains(searchLower) ||
                  user['hobbies'].toLowerCase().contains(searchLower);
          }
        }).toList();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('User List'),
        backgroundColor: Colors.pinkAccent,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.pink.shade200, Colors.purple.shade300],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(10.0),
              child: Column(
                children: [
                  TextField(
                    controller: _searchController,
                    onChanged: _filterUsers,
                    decoration: InputDecoration(
                      labelText: 'Search Users',
                      prefixIcon: const Icon(Icons.search, color: Colors.pinkAccent),
                      border: OutlineInputBorder(borderRadius: BorderRadius.circular(30)),
                      filled: true,
                      fillColor: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 10),
                  DropdownButtonFormField<String>(
                    value: _selectedFilter,
                    items: _filterOptions.map((filter) {
                      return DropdownMenuItem(
                        value: filter,
                        child: Text(filter),
                      );
                    }).toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedFilter = value ?? 'All';
                        _filterUsers(_searchController.text);
                      });
                    },
                    decoration: InputDecoration(
                      labelText: 'Filter By',
                      border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
                      filled: true,
                      fillColor: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: _filteredUsers.isEmpty
                  ? const Center(
                child: Text(
                  "No users found.",
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.grey),
                ),
              )
                  : ListView.builder(
                itemCount: _filteredUsers.length,
                itemBuilder: (context, index) {
                  final user = _filteredUsers[index];
                  final isFavorite = widget.favoriteUsers.any((favUser) => favUser['email'] == user['email']);

                  return Card(
                    margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    elevation: 4,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                    child: ListTile(
                      title: Text(
                        user['name'],
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      subtitle: Text(
                        "üìß ${user['email']}\nüìû ${user['mobile']}\nüèô ${user['city']}\nüéÇ ${user['dob']}\nüé® ${user['hobbies']}",
                      ),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: Icon(
                              isFavorite ? Icons.favorite : Icons.favorite_border,
                              color: isFavorite ? Colors.red : Colors.grey,
                            ),
                            onPressed: () {
                              widget.onToggleFavorite(user);
                              setState(() {});
                            },
                          ),
                          IconButton(
                            icon: const Icon(Icons.edit, color: Colors.blue),
                            onPressed: () {},
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete, color: Colors.red),
                            onPressed: () {},
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
